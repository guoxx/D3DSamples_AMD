#line 1 "\\\\?\\D:\\Downloads\\ForwardPlus11_v1.1\\ForwardPlus11_v1.1\\ForwardPlus11\\Shaders\\source\\ForwardPlus11Tiling.hlsl"


#line 53


#line 1 "\\\\?\\D:\\Downloads\\ForwardPlus11_v1.1\\ForwardPlus11_v1.1\\ForwardPlus11\\Shaders\\source\\ForwardPlus11Common.hlsl"


#line 56
cbuffer cbPerObject : register ( b0 ) 
{ 
    matrix g_mWorldViewProjection : packoffset ( c0 ) ; 
    matrix g_mWorldView : packoffset ( c4 ) ; 
    matrix g_mWorld : packoffset ( c8 ) ; 
    float4 g_MaterialAmbientColorUp : packoffset ( c12 ) ; 
    float4 g_MaterialAmbientColorDown : packoffset ( c13 ) ; 
} 

cbuffer cbPerFrame : register ( b1 ) 
{ 
    matrix g_mProjection : packoffset ( c0 ) ; 
    matrix g_mProjectionInv : packoffset ( c4 ) ; 
    float3 g_vCameraPos : packoffset ( c8 ) ; 
    float g_fAlphaTest : packoffset ( c8 . w ) ; 
    uint g_uNumLights : packoffset ( c9 ) ; 
    uint g_uWindowWidth : packoffset ( c9 . y ) ; 
    uint g_uWindowHeight : packoffset ( c9 . z ) ; 
    uint g_uMaxNumLightsPerTile : packoffset ( c9 . w ) ; 
} ; 

#line 80


#line 86



#line 92
uint GetTileIndex ( float2 ScreenPos ) 
{ 
    float fTileRes = ( float ) 16 ; 
    uint nNumCellsX = ( g_uWindowWidth + 16 - 1 ) / 16 ; 
    uint nTileIdx = floor ( ScreenPos . x / fTileRes ) + floor ( ScreenPos . y / fTileRes ) * nNumCellsX ; 
    return nTileIdx ; 
} 



#line 55 "\\\\?\\D:\\Downloads\\ForwardPlus11_v1.1\\ForwardPlus11_v1.1\\ForwardPlus11\\Shaders\\source\\ForwardPlus11Tiling.hlsl"


#line 60
Buffer < float4 > g_PointLightBufferCenterAndRadius : register ( t0 ) ; 
Buffer < float4 > g_SpotLightBufferCenterAndRadius : register ( t1 ) ; 

#line 65

Texture2DMS < float > g_DepthTexture : register ( t2 ) ; 


RWBuffer < uint > g_PerTileLightIndexBufferOut : register ( u0 ) ; 

#line 74

groupshared uint ldsZMax ; 
groupshared uint ldsZMin ; 


groupshared uint ldsLightIdxCounter ; 
groupshared uint ldsLightIdx [ 544 ] ; 

#line 88
float4 CreatePlaneEquation ( float4 b , float4 c ) 
{ 
    float4 n ; 
    
#line 93
    n . xyz = normalize ( cross ( b . xyz , c . xyz ) ) ; 
    
#line 96
    n . w = 0 ; 
    
    return n ; 
} 

#line 103
float GetSignedDistanceFromPlane ( float4 p , float4 eqn ) 
{ 
    
#line 107
    return dot ( eqn . xyz , p . xyz ) ; 
} 

#line 111
uint GetNumTilesX ( ) 
{ 
    return ( uint ) ( ( g_uWindowWidth + 16 - 1 ) / ( float ) 16 ) ; 
} 

#line 117
uint GetNumTilesY ( ) 
{ 
    return ( uint ) ( ( g_uWindowHeight + 16 - 1 ) / ( float ) 16 ) ; 
} 

#line 123
float4 ConvertProjToView ( float4 p ) 
{ 
    p = mul ( p , g_mProjectionInv ) ; 
    p /= p . w ; 
    return p ; 
} 

#line 131
float ConvertProjDepthToView ( float z ) 
{ 
    z = 1.f / ( z * g_mProjectionInv . _34 + g_mProjectionInv . _44 ) ; 
    return z ; 
} 

#line 149



void CalculateMinMaxDepthInLdsMSAA ( uint3 globalThreadIdx , uint depthBufferNumSamples ) 
{ 
    float minZForThisPixel = 3.402823466e+38F ; 
    float maxZForThisPixel = 0.f ; 
    
    float depth0 = g_DepthTexture . Load ( uint2 ( globalThreadIdx . x , globalThreadIdx . y ) , 0 ) . x ; 
    float viewPosZ0 = ConvertProjDepthToView ( depth0 ) ; 
    if ( depth0 != 0.f ) 
    { 
        maxZForThisPixel = max ( maxZForThisPixel , viewPosZ0 ) ; 
        minZForThisPixel = min ( minZForThisPixel , viewPosZ0 ) ; 
    } 
    
    for ( uint sampleIdx = 1 ; sampleIdx < depthBufferNumSamples ; sampleIdx ++ ) 
    { 
        float depth = g_DepthTexture . Load ( uint2 ( globalThreadIdx . x , globalThreadIdx . y ) , sampleIdx ) . x ; 
        float viewPosZ = ConvertProjDepthToView ( depth ) ; 
        if ( depth != 0.f ) 
        { 
            maxZForThisPixel = max ( maxZForThisPixel , viewPosZ ) ; 
            minZForThisPixel = min ( minZForThisPixel , viewPosZ ) ; 
        } 
    } 
    
    uint zMaxForThisPixel = asuint ( maxZForThisPixel ) ; 
    uint zMinForThisPixel = asuint ( minZForThisPixel ) ; 
    InterlockedMax ( ldsZMax , zMaxForThisPixel ) ; 
    InterlockedMin ( ldsZMin , zMinForThisPixel ) ; 
} 


#line 186




#line 193
[ numthreads ( 16 , 16 , 1 ) ] 
void CullLightsCS ( uint3 globalIdx : SV_DispatchThreadID , uint3 localIdx : SV_GroupThreadID , uint3 groupIdx : SV_GroupID ) 
{ 
    uint localIdxFlattened = localIdx . x + localIdx . y * 16 ; 
    uint tileIdxFlattened = groupIdx . x + groupIdx . y * GetNumTilesX ( ) ; 
    
    if ( localIdxFlattened == 0 ) 
    { 
        
        ldsZMin = 0xffffffff ; 
        ldsZMax = 0 ; 
        
        ldsLightIdxCounter = 0 ; 
    } 
    
    float4 frustumEqn [ 4 ] ; 
    { 
        uint pxm = 16 * groupIdx . x ; 
        uint pym = 16 * groupIdx . y ; 
        uint pxp = 16 * ( groupIdx . x + 1 ) ; 
        uint pyp = 16 * ( groupIdx . y + 1 ) ; 
        
        uint uWindowWidthEvenlyDivisibleByTileRes = 16 * GetNumTilesX ( ) ; 
        uint uWindowHeightEvenlyDivisibleByTileRes = 16 * GetNumTilesY ( ) ; 
        
#line 219
        float4 frustum [ 4 ] ; 
        frustum [ 0 ] = ConvertProjToView ( float4 ( pxm / ( float ) uWindowWidthEvenlyDivisibleByTileRes * 2.f - 1.f , ( uWindowHeightEvenlyDivisibleByTileRes - pym ) / ( float ) uWindowHeightEvenlyDivisibleByTileRes * 2.f - 1.f , 1.f , 1.f ) ) ; 
        frustum [ 1 ] = ConvertProjToView ( float4 ( pxp / ( float ) uWindowWidthEvenlyDivisibleByTileRes * 2.f - 1.f , ( uWindowHeightEvenlyDivisibleByTileRes - pym ) / ( float ) uWindowHeightEvenlyDivisibleByTileRes * 2.f - 1.f , 1.f , 1.f ) ) ; 
        frustum [ 2 ] = ConvertProjToView ( float4 ( pxp / ( float ) uWindowWidthEvenlyDivisibleByTileRes * 2.f - 1.f , ( uWindowHeightEvenlyDivisibleByTileRes - pyp ) / ( float ) uWindowHeightEvenlyDivisibleByTileRes * 2.f - 1.f , 1.f , 1.f ) ) ; 
        frustum [ 3 ] = ConvertProjToView ( float4 ( pxm / ( float ) uWindowWidthEvenlyDivisibleByTileRes * 2.f - 1.f , ( uWindowHeightEvenlyDivisibleByTileRes - pyp ) / ( float ) uWindowHeightEvenlyDivisibleByTileRes * 2.f - 1.f , 1.f , 1.f ) ) ; 
        
#line 229
        for ( uint i = 0 ; i < 4 ; i ++ ) 
        frustumEqn [ i ] = CreatePlaneEquation ( frustum [ i ] , frustum [ ( i + 1 ) & 3 ] ) ; 
    } 
    
    GroupMemoryBarrierWithGroupSync ( ) ; 
    
#line 238
    
    float minZ = 3.402823466e+38F ; 
    float maxZ = 0.f ; 
    
#line 244
    
    uint depthBufferWidth , depthBufferHeight , depthBufferNumSamples ; 
    g_DepthTexture . GetDimensions ( depthBufferWidth , depthBufferHeight , depthBufferNumSamples ) ; 
    CalculateMinMaxDepthInLdsMSAA ( globalIdx , depthBufferNumSamples ) ; 
    
    
    GroupMemoryBarrierWithGroupSync ( ) ; 
    maxZ = asfloat ( ldsZMax ) ; 
    minZ = asfloat ( ldsZMin ) ; 
    
    
#line 256
    uint uNumPointLights = g_uNumLights & 0xFFFFu ; 
    for ( uint i = 0 ; i < uNumPointLights ; i += ( 16 * 16 ) ) 
    { 
        uint il = localIdxFlattened + i ; 
        if ( il < uNumPointLights ) 
        { 
            float4 center = g_PointLightBufferCenterAndRadius [ il ] ; 
            float r = center . w ; 
            center . xyz = mul ( float4 ( center . xyz , 1 ) , g_mWorldView ) . xyz ; 
            
#line 267
            
            if ( - center . z + minZ < r && center . z - maxZ < r ) 
            
#line 271
            
            { 
                if ( ( GetSignedDistanceFromPlane ( center , frustumEqn [ 0 ] ) < r ) && 
                ( GetSignedDistanceFromPlane ( center , frustumEqn [ 1 ] ) < r ) && 
                ( GetSignedDistanceFromPlane ( center , frustumEqn [ 2 ] ) < r ) && 
                ( GetSignedDistanceFromPlane ( center , frustumEqn [ 3 ] ) < r ) ) 
                { 
                    
#line 280
                    uint dstIdx = 0 ; 
                    InterlockedAdd ( ldsLightIdxCounter , 1 , dstIdx ) ; 
                    ldsLightIdx [ dstIdx ] = il ; 
                } 
            } 
        } 
    } 
    
    GroupMemoryBarrierWithGroupSync ( ) ; 
    
#line 291
    uint uNumPointLightsInThisTile = ldsLightIdxCounter ; 
    uint uNumSpotLights = ( g_uNumLights & 0xFFFF0000u ) >> 16 ; 
    for ( uint j = 0 ; j < uNumSpotLights ; j += ( 16 * 16 ) ) 
    { 
        uint jl = localIdxFlattened + j ; 
        if ( jl < uNumSpotLights ) 
        { 
            float4 center = g_SpotLightBufferCenterAndRadius [ jl ] ; 
            float r = center . w ; 
            center . xyz = mul ( float4 ( center . xyz , 1 ) , g_mWorldView ) . xyz ; 
            
#line 303
            
            if ( - center . z + minZ < r && center . z - maxZ < r ) 
            
#line 307
            
            { 
                if ( ( GetSignedDistanceFromPlane ( center , frustumEqn [ 0 ] ) < r ) && 
                ( GetSignedDistanceFromPlane ( center , frustumEqn [ 1 ] ) < r ) && 
                ( GetSignedDistanceFromPlane ( center , frustumEqn [ 2 ] ) < r ) && 
                ( GetSignedDistanceFromPlane ( center , frustumEqn [ 3 ] ) < r ) ) 
                { 
                    
#line 316
                    uint dstIdx = 0 ; 
                    InterlockedAdd ( ldsLightIdxCounter , 1 , dstIdx ) ; 
                    ldsLightIdx [ dstIdx ] = jl ; 
                } 
            } 
        } 
    } 
    
    GroupMemoryBarrierWithGroupSync ( ) ; 
    
    { 
        uint startOffset = g_uMaxNumLightsPerTile * tileIdxFlattened ; 
        
        for ( uint i = localIdxFlattened ; i < uNumPointLightsInThisTile ; i += ( 16 * 16 ) ) 
        { 
            
            g_PerTileLightIndexBufferOut [ startOffset + i ] = ldsLightIdx [ i ] ; 
        } 
        
        for ( uint j = ( localIdxFlattened + uNumPointLightsInThisTile ) ; j < ldsLightIdxCounter ; j += ( 16 * 16 ) ) 
        { 
            
            g_PerTileLightIndexBufferOut [ startOffset + j + 1 ] = ldsLightIdx [ j ] ; 
        } 
        
        if ( localIdxFlattened == 0 ) 
        { 
            
            g_PerTileLightIndexBufferOut [ startOffset + uNumPointLightsInThisTile ] = 0x7fffffff ; 
            
#line 347
            g_PerTileLightIndexBufferOut [ startOffset + ldsLightIdxCounter + 1 ] = 0x7fffffff ; 
        } 
    } 
} 
 